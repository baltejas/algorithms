/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.77
 * Generated at: 2017-05-07 01:42:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n");
      out.write("\t<head>\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"resources/css/bootstrap.css\">\n");
      out.write("\t</head>\n");
      out.write("\t<body>\n");
      out.write("\t\t<div class=\"container\">\t\n");
      out.write("\t\t<h1>Introduction to Algorithms</h1>\n");
      out.write("\t\t<a href=\"/algorithms/list\">Home</a>\n");
      out.write("\t\t\t<div class=\"mt-4 row\">\n");
      out.write("\t\t\t\t<div class=\"col-md-8\">\n");
      out.write("\t\t\t\t\t<ul>\n");
      out.write("\t\t\t\t\t\t<li>1.2-2 Suppose we are comparing implementations of insertion sort and merge sort on the same machine. \n");
      out.write("\t\t\t\t\t\t\tFor inputs of size n, insertion sort runs in 8n2 steps, while merge sort runs in 64nlgn steps.\n");
      out.write("\t\t\t\t\t\t\tFor which values of n does insertion sort beat merge sort?\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"mt-2 mark\"><pre>\n");
      out.write("public String question_1Dot2dash2() {\n");
      out.write("\tint i = 2; // log(1) = 0 hence we start from 2\n");
      out.write("\twhile(i > 0) {\n");
      out.write("\t\t// Steps to sort n inputs: insertion sort - 8n*n\n");
      out.write("\t\t// Steps to sort n inputs: merge sort - 64nlgn (log to base 2)\n");
      out.write("\t\tif((8 * i * i) > (64 * i * (Math.log(i)/Math.log(2)))) {\n");
      out.write("\t\t\treturn \"Insertion sort beats merge sort at: \" + i;\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\ti++;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\treturn null;\n");
      out.write("}\n");
      out.write("\t\t\t\t\t\t\t\t</pre></div>\n");
      out.write("\t\t\t\t\t\t<a href=\"/algorithms/question_1Dot2dash2\">Click to run</a>\n");
      out.write("\t\t\t\t\t\t<label>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${answer}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</label>\n");
      out.write("\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<li class=\"mt-4\">For each function f(n) and time t in the following table, \n");
      out.write("\t\t\t\t\t\t\t\t\t\t determine the largest size n of a problem that can be solved in time t,\n");
      out.write("\t\t\t\t\t\t\t\t\t\t assuming that the algorithm to solve the problem takes f(n) microseconds.\n");
      out.write("\t\t\t\t\t\t\t<div class=\"mt-2 mark\">\n");
      out.write("\t\t\t\t\t\t\t\t<pre>\n");
      out.write("First recall that a microsecond is 10 power -6 seconds. \n");
      out.write("Hence, one second = 10 power 6 microseconds.\n");
      out.write("\n");
      out.write("Now, if we have an algorithm that runs in f(n) steps given an input of size n\n");
      out.write("for example, f(899) <= 10 power 6 that means that inputs of size 899 \n");
      out.write("can be processed in less than one second.\n");
      out.write("\n");
      out.write("This problem asks us to find the input of largest size that can be processed \n");
      out.write("in one second, one hour, etc given different running times f(n).\n");
      out.write(" \n");
      out.write("That is, to determine the largest problem that can be done in one second,\n");
      out.write("for example, we have to determine the largest n such that f(n) <= 10 power 6\n");
      out.write("\n");
      out.write("so for log(n) we have log(n) <= 10 power 6 and calculate for n\n");
      out.write("we have n = 10 power 3000000\n");
      out.write("\n");
      out.write("https://udel.edu/~caviness/Class/CISC320-02S/exercise-solns/ch01/R-1.7.pdf\n");
      out.write("\n");
      out.write("</pre>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<li class=\"mt-4\">Insertion Sort\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"mt-2 mark\"><pre>\n");
      out.write("public int[] insertionSort() {\n");
      out.write("\tint numbers[] = {31,41,59,26,41,58};\n");
      out.write("\tfor(int i = 1; i < numbers.length; i++) {\n");
      out.write("\t\tint key = numbers[i];\n");
      out.write("\t\tint j = i - 1;\n");
      out.write("\t\t// Check if key is less than earlier no.\n");
      out.write("\t\twhile(j >= 0 && key < numbers[j]) {\n");
      out.write("\t\t\tnumbers[j + 1] = numbers[j];\n");
      out.write("\t\t\tj = j - 1;\n");
      out.write("\t\t}\n");
      out.write("\t\tnumbers[j + 1] = key;\n");
      out.write("\t}\n");
      out.write("\treturn numbers;\n");
      out.write("}\n");
      out.write("\t\t\t\t\t\t\t\t</pre></div>\n");
      out.write("\t\t\t\t\t\t<a href=\"/algorithms/insertionSort\">Click to sort: 31,41,59,26,41,58  -> </a>\n");
      out.write("\t\t\t\t\t\t<label>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sorted}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</label>\n");
      out.write("\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<li class=\"mt-4\">2.1-2 Use INSERTION SORT in non increasing order\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"mt-2 mark\"><pre>\n");
      out.write("public int[] question_2Dot1dash2() {\n");
      out.write("\tint numbers[] = {31,41,59,26,41,58};\n");
      out.write("\tfor(int i = 1; i < numbers.length; i++) {\n");
      out.write("\t\tint key = numbers[i];\n");
      out.write("\t\tint j = i - 1;\n");
      out.write("\t\t// Check if key is greater than earlier no.\n");
      out.write("\t\twhile(j >= 0 && key > numbers[j]) {\n");
      out.write("\t\t\tnumbers[j + 1] = numbers[j];\n");
      out.write("\t\t\tj = j - 1;\n");
      out.write("\t\t}\n");
      out.write("\t\tnumbers[j + 1] = key;\n");
      out.write("\t}\n");
      out.write("\treturn numbers;\n");
      out.write("}\n");
      out.write("\t\t\t\t\t\t\t\t</pre></div>\n");
      out.write("\t\t\t\t\t\t<a href=\"/algorithms/question_2Dot1dash2\">Click to sort: 31,41,59,26,41,58  -> </a>\n");
      out.write("\t\t\t\t\t\t<label>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${descSorted}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</label>\n");
      out.write("\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t</ul>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
