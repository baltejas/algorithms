<html>
	<head>
		<link rel="stylesheet" href="resources/css/bootstrap.css">
	</head>
	<body>
		<div class="container">	
		<h1>Introduction to Algorithms</h1>
		<a href="/algorithms/list">Home</a>
			<div class="mt-4 row">
				<div class="col-md-8">
					<ul>
						<li>1.2-2 Suppose we are comparing implementations of insertion sort and merge sort on the same machine. 
							For inputs of size n, insertion sort runs in 8n2 steps, while merge sort runs in 64nlgn steps.
							For which values of n does insertion sort beat merge sort?
								<div class="mt-2 mark"><pre>
public String question_1Dot2dash2() {
	int i = 2; // log(1) = 0 hence we start from 2
	while(i > 0) {
		// Steps to sort n inputs: insertion sort - 8n*n
		// Steps to sort n inputs: merge sort - 64nlgn (log to base 2)
		if((8 * i * i) > (64 * i * (Math.log(i)/Math.log(2)))) {
			return "Insertion sort beats merge sort at: " + i;
		} else {
			i++;
		}
	}
	return null;
}
								</pre></div>
						<a href="/algorithms/question_1Dot2dash2">Click to run</a>
						<label>${answer}</label>
						</li>
						
						<li class="mt-4">Insertion Sort
								<div class="mt-2 mark"><pre>
public int[] insertionSort() {
	int numbers[] = {31,41,59,26,41,58};
	for(int j = 1; j < numbers.length; j++) { // Outer loop
		int key = numbers[j]; // Selected number
		int i = j - 1; // Index of number before the selected number
			while(i >= 0 && numbers[i] > key) {
				numbers[i+1] = numbers[i]; // Swap numbers
				i = i - 1;
			}
		numbers[i+1] = key;
		
	}
	return numbers;
}
								</pre></div>
						<a href="/algorithms/insertionSort">Click to sort: 31,41,59,26,41,58  -> </a>
						<label>${sorted}</label>
						</li>
						
						<li class="mt-4">2.1-2 - Use INSERTION SORT in non increasing order
								<div class="mt-2 mark"><pre>
public static int[] question_2Dot1dash2() {
		int numbers[] = {31,41,59,26,41,58};
		for(int i = 1; i < numbers.length; i++) {
			int key = numbers[i];
			int j = i - 1;
			while(j >= 0 && key > numbers[j]) { // Check for non increasing
				numbers[j + 1] = numbers[j];
				j = j - 1;
			}
			numbers[j + 1] = key;
		}
		return numbers;
	}
								</pre></div>
						<a href="/algorithms/insertionSort">Click to sort: 31,41,59,26,41,58  -> </a>
						<label>${sorted}</label>
						</li>
						
					</ul>
				</div>
			</div>
		</div>
	</body>
</html>